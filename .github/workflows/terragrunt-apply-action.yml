name: Terragrunt Apply

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terragrunt-apply.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - test
          - dev
          - prod
      first_deploy:
        description: 'First deployment (handles dependencies)'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  SQL_ADMIN_PASSWORD: ${{ secrets.SQL_ADMIN_PASSWORD }}
  TF_VERSION: '1.3.0'
  TG_VERSION: '0.55.0'

jobs:
  detect-changes:
    name: Detect Changed Environments
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      environments: ${{ steps.detect.outputs.environments }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed environments
        id: detect
        run: |
          # Get changed files in the last commit
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          
          # Detect which environments changed
          ENVS=""
          if echo "$CHANGED_FILES" | grep -q "terraform/live/test/"; then
            ENVS="${ENVS}test,"
          fi
          if echo "$CHANGED_FILES" | grep -q "terraform/live/dev/"; then
            ENVS="${ENVS}dev,"
          fi
          if echo "$CHANGED_FILES" | grep -q "terraform/live/prod/"; then
            ENVS="${ENVS}prod,"
          fi
          
          # If modules changed, deploy to test first
          if echo "$CHANGED_FILES" | grep -q "terraform/modules/"; then
            ENVS="test,"
          fi
          
          # Remove trailing comma and convert to JSON array
          ENVS=$(echo "$ENVS" | sed 's/,$//')
          if [ -z "$ENVS" ]; then
            echo "environments=[]" >> $GITHUB_OUTPUT
          else
            ENVS_JSON=$(echo "[$ENVS]" | sed 's/,/","/g' | sed 's/\[/["/' | sed 's/\]/"]/')
            echo "environments=$ENVS_JSON" >> $GITHUB_OUTPUT
          fi

  apply:
    name: Apply to ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      always() && 
      (github.event_name == 'workflow_dispatch' || 
       (needs.detect-changes.result == 'success' && needs.detect-changes.outputs.environments != '[]'))
    strategy:
      matrix:
        environment: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.environment)) || fromJson(needs.detect-changes.outputs.environments) }}
      fail-fast: false
      max-parallel: 1
    
    environment:
      name: ${{ matrix.environment }}
      url: https://portal.azure.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Install Terragrunt
        run: |
          wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TG_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt --version

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }

      - name: Terragrunt Init
        working-directory: terraform/live/${{ matrix.environment }}
        run: terragrunt run-all init --terragrunt-non-interactive

      - name: Terragrunt Apply (First Deploy)
        if: github.event.inputs.first_deploy == 'true'
        working-directory: terraform/live/${{ matrix.environment }}
        env:
          SQL_ADMIN_PASSWORD: ${{ secrets.SQL_ADMIN_PASSWORD }}
        run: |
          echo "ðŸš€ First deployment - applying modules in dependency order..."
          
          # Step 1: Independent modules
          for module in monitoring network sql; do
            echo "ðŸ“¦ Applying $module..."
            terragrunt apply --auto-approve --terragrunt-non-interactive --terragrunt-working-dir $module
          done
          
          # Step 2: KeyVault (depends on SQL and monitoring)
          echo "ðŸ“¦ Applying keyvault..."
          terragrunt apply --auto-approve --terragrunt-non-interactive --terragrunt-working-dir keyvault
          
          # Step 3: AKS (depends on monitoring and network)
          echo "ðŸ“¦ Applying aks..."
          terragrunt apply --auto-approve --terragrunt-non-interactive --terragrunt-working-dir aks
          
          echo "âœ… First deployment completed!"

      - name: Terragrunt Apply (Standard)
        if: github.event.inputs.first_deploy != 'true'
        working-directory: terraform/live/${{ matrix.environment }}
        env:
          SQL_ADMIN_PASSWORD: ${{ secrets.SQL_ADMIN_PASSWORD }}
        run: |
          terragrunt run-all apply --terragrunt-non-interactive --terragrunt-parallelism 1 --auto-approve

      - name: Export Kubeconfig
        if: success()
        working-directory: terraform/live/${{ matrix.environment }}
        run: |
          # Find and copy kubeconfig
          KUBECONFIG_FILE=$(find aks/.terragrunt-cache -name "kubeconfig-*.yaml" -type f 2>/dev/null | head -n 1)
          if [ -n "$KUBECONFIG_FILE" ]; then
            cp "$KUBECONFIG_FILE" "$GITHUB_WORKSPACE/kubeconfig-${{ matrix.environment }}.yaml"
            echo "âœ… Kubeconfig saved"
          fi

      - name: Upload Kubeconfig Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig-${{ matrix.environment }}
          path: kubeconfig-${{ matrix.environment }}.yaml
          retention-days: 7

      - name: Create Deployment Summary
        if: always()
        run: |
          echo "## Deployment Summary: ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ matrix.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ðŸŽ‰ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
            echo "Resources have been applied to the **${{ matrix.environment }}** environment." >> $GITHUB_STEP_SUMMARY
          fi
