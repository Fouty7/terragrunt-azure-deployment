# Azure DevOps Pipeline for Terragrunt Plan (PR Validation)
# Triggers on Pull Requests to main/develop branches
# Detects changed environments and runs plan for each

trigger: none

pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - terraform/**
      - azure-pipelines-plan.yml

variables:
  TF_VERSION: '1.3.0'
  TG_VERSION: '0.55.0'

stages:
  - stage: DetectChanges
    displayName: 'Detect Changed Environments'
    jobs:
      - job: Detect
        displayName: 'Detect Changed Files'
        pool:
          name: 'Azure Pipelines'
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            fetchDepth: 0
          
          - bash: |
              # Get changed files between source and target branches
              CHANGED_FILES=$(git diff --name-only origin/$(System.PullRequest.TargetBranch)...HEAD)
              
              echo "Changed files:"
              echo "$CHANGED_FILES"
              
              # Detect which environments changed
              ENVS=""
              if echo "$CHANGED_FILES" | grep -q "terraform/live/test/"; then
                ENVS="${ENVS}test,"
              fi
              if echo "$CHANGED_FILES" | grep -q "terraform/live/dev/"; then
                ENVS="${ENVS}dev,"
              fi
              if echo "$CHANGED_FILES" | grep -q "terraform/live/prod/"; then
                ENVS="${ENVS}prod,"
              fi
              
              # If modules changed, check all environments
              if echo "$CHANGED_FILES" | grep -q "terraform/modules/"; then
                ENVS="test,dev,prod,"
              fi
              
              # Remove trailing comma
              ENVS=$(echo "$ENVS" | sed 's/,$//')
              
              echo "Detected environments: $ENVS"
              echo "##vso[task.setvariable variable=environments;isOutput=true]$ENVS"
            name: detectEnvs
            displayName: 'Detect Changed Environments'

  - stage: Plan
    displayName: 'Terragrunt Plan'
    dependsOn: DetectChanges
    # Dynamic strategy - run plan for each detected environment
    jobs:
      - job: PlanTest
        displayName: 'Plan: test'
        condition: contains(stageDependencies.DetectChanges.Detect.outputs['detectEnvs.environments'], 'test')
        pool:
          name: 'Azure Pipelines'
          vmImage: 'ubuntu-latest'
        variables:
          ENVIRONMENT: 'test'
        steps:
          - template: azure-pipelines/templates/terragrunt-plan-steps.yml
            parameters:
              environment: $(ENVIRONMENT)
      
      - job: PlanDev
        displayName: 'Plan: dev'
        condition: contains(stageDependencies.DetectChanges.Detect.outputs['detectEnvs.environments'], 'dev')
        pool:
          name: 'Azure Pipelines'
          vmImage: 'ubuntu-latest'
        variables:
          ENVIRONMENT: 'dev'
        steps:
          - template: azure-pipelines/templates/terragrunt-plan-steps.yml
            parameters:
              environment: $(ENVIRONMENT)
      
      - job: PlanProd
        displayName: 'Plan: prod'
        condition: contains(stageDependencies.DetectChanges.Detect.outputs['detectEnvs.environments'], 'prod')
        pool:
          name: 'Azure Pipelines'
          vmImage: 'ubuntu-latest'
        variables:
          ENVIRONMENT: 'prod'
        steps:
          - template: azure-pipelines/templates/terragrunt-plan-steps.yml
            parameters:
              environment: $(ENVIRONMENT)
